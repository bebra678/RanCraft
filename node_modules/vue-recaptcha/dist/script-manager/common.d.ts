import { LiteralUnion, Opaque } from 'type-fest';
export type RecaptchaCallback = '__vueRecaptchaLoaded';
export interface RecaptchaV2CommonOptions {
    sitekey: string;
    tabindex?: string;
    callback?: (response: string) => void;
    'expired-callback'?: () => void;
    'error-callback'?: (error: Error) => void;
}
export interface RecaptchaV2CheckboxOptions extends RecaptchaV2CommonOptions {
    theme?: 'dark' | 'light';
    size?: 'compact' | 'normal';
}
export interface RecaptchaV2InvisibleOptions extends RecaptchaV2CommonOptions {
    size: 'invisible';
    badge?: 'bottomright' | 'bottomleft' | 'inline';
}
export type RecaptchaV2Options = RecaptchaV2CheckboxOptions | RecaptchaV2InvisibleOptions;
export type WidgetID = Opaque<string, 'widget-id'>;
export interface GRecaptcha {
    render(ele: Element, options: RecaptchaV2Options): WidgetID;
    reset(widgetId: WidgetID): void;
    execute(widgetId: WidgetID): void;
    execute(siteKey: string, options: {
        action: string;
    }): Promise<string>;
}
declare global {
    interface Window {
        grecaptcha: GRecaptcha;
        __vueRecaptchaLoaded: () => void;
    }
}
export interface RecaptchaParams {
    render: LiteralUnion<'explicit', string>;
    hl?: string | undefined;
    trustedtypes?: 'true' | undefined;
    onload?: RecaptchaCallback;
    [k: string]: string | undefined;
}
export interface ScriptManagerFactory {
    (params: RecaptchaParams): () => void;
}
export declare const recaptchaLoaded: import("p-defer").DeferredPromise<unknown>;
export declare function toQueryString(params: RecaptchaParams): string;
export declare function normalizeParams(raw: RecaptchaParams): string[][];
export declare function toStringPair(params: RecaptchaParams): string[][];
export declare function checkRecaptchaLoad(): any;
